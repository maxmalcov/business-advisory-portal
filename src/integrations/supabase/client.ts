
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://grpzctxumndpwdwzgzqt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdycHpjdHh1bW5kcHdkd3pnenF0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM3Njc3NTUsImV4cCI6MjA1OTM0Mzc1NX0.au6WCg30IA9bx4-5MdapzytvS-AJoet5dFyPOIzHopw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Type definitions for service requests to avoid TypeScript errors
// This is a workaround until the types.ts file is automatically regenerated
export type ServiceRequest = {
  id: string;
  service_id: string;
  service_name: string;
  client_id: string;
  client_name: string;
  request_date: string;
  status: string;
  admin_notes?: string | null;
  updated_at: string;
}

// Type definition for services - updated to match the database schema
export type Service = {
  id: string;
  title: string;
  description: string;
  price: number;
  iconName: string; // We keep this as camelCase for the frontend
  iconname?: string; // Database column is lowercase
  badges: string[];
  popular: boolean;
  category?: string | null;
  status: 'active' | 'inactive';
  created_at: string;
  updated_at: string;
}

// Type definition for employees - matches the database schema
export type Employee = {
  id: string;
  full_name: string;
  position: string;
  status: 'active' | 'terminated';
  start_date: string;
  end_date?: string | null;
  created_at?: string;
  updated_at?: string;
}

// Type definition for useful links - matches the database schema
export type UsefulLinkDB = {
  id: string;
  title: string;
  description: string | null;
  url: string;
  category: string;
  icon: string | null;
  display_order: number | null;
  created_at: string;
  updated_at: string;
}

// Type definition for employee work hours
export type EmployeeWorkHours = {
  id: string;
  client_id: string;
  month_year: string;
  employee_id?: string | null;
  employee_name: string;
  company_name?: string | null;
  gross_salary: number;
  absence_days?: number | null;
  medical_leave_date?: string | null;
  notes?: string | null;
  created_at: string;
  updated_at: string;
}

// Type definition for work hours submissions
export type WorkHoursSubmission = {
  id: string;
  client_id: string;
  month_year: string;
  submitted_at: string;
  hr_email?: string | null;
  is_locked: boolean;
}

// Helper function to safely access the service_requests table
export const serviceRequestsTable = () => {
  return supabase.from('service_requests');
};

// Helper function to safely access the services table
// This is a workaround because the services table isn't in the generated types yet
export const servicesTable = () => {
  // Force TypeScript to treat this as any to bypass type checking
  // since we're manually defining the Service type above
  return supabase.from('services' as any);
};

// Helper function to safely access the employees table
export const employeesTable = () => {
  // Use a simple approach that works with the type system
  // We'll cast the result to any to bypass TypeScript's type checking
  // and handle the type conversion in the component code
  return supabase.from('employees' as any);
};

// Helper function to safely access the useful_links table
export const usefulLinksTable = () => {
  // Simplify our approach - just use 'any' to bypass TypeScript's type checking
  return supabase.from('useful_links' as any);
};

// Helper function to safely access the employee_work_hours table
export const employeeWorkHoursTable = () => {
  return supabase.from('employee_work_hours' as any);
};

// Helper function to safely access the work_hours_submissions table
export const workHoursSubmissionsTable = () => {
  return supabase.from('work_hours_submissions' as any);
};

// Setup realtime subscription for the service_requests table
// We're removing the problematic RPC call and using direct channel subscription instead
const setupRealtimeSubscription = () => {
  try {
    console.log('Setting up realtime subscription for service_requests table');
    
    // Instead of trying to call a DB function, we'll just subscribe to the channel directly
    const channel = supabase
      .channel('service_requests_changes')
      .on('postgres_changes', {
        event: '*',
        schema: 'public',
        table: 'service_requests'
      }, (payload) => {
        console.log('Realtime change received:', payload);
      })
      .subscribe((status) => {
        console.log(`Realtime subscription status: ${status}`);
      });
      
    return channel;
  } catch (err) {
    console.error('Failed to setup realtime subscription:', err);
    return null;
  }
};

// Initialize realtime subscription
setupRealtimeSubscription();
